{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bautista\\\\Documents\\\\Proyectos\\\\bayTours\\\\bayTours\\\\frontend_2.0\\\\baytours-react\\\\src\\\\components\\\\EditGuideModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditGuideModal = ({\n  show,\n  onHide,\n  groupData,\n  onGuideUpdated\n}) => {\n  _s();\n  // Estado para almacenar el guía seleccionado\n  const [selectedGuide, setSelectedGuide] = useState('');\n\n  // Estado para la lista de guías disponibles (se cargarán cuando se abra el modal)\n  const [availableGuides, setAvailableGuides] = useState([]);\n\n  // Cuando el modal se abre, carga la lista de guías (usando fetch)\n  useEffect(() => {\n    if (show) {\n      // Aquí llamamos al endpoint del backend para obtener los guías disponibles.\n      // Se pueden pasar parámetros como startingDate y endingDate que se extraigan de groupData.\n      const startingDate = groupData.start_date; // Ajusta según corresponda\n      const endingDate = groupData.end_date;\n      fetch(`${process.env.REACT_APP_API_URL}/guides/${groupData.id_group}/available_guides?starting_date=${startingDate}&ending_date=${endingDate}`).then(response => response.json()).then(data => {\n        if (data.available_guides) {\n          setAvailableGuides(data.available_guides);\n          // Si groupData tiene guía actual, la seleccionamos por defecto\n          if (data.current_guide) {\n            setSelectedGuide(data.current_guide.id);\n          }\n        } else {\n          setAvailableGuides([]);\n        }\n      }).catch(error => console.error('Error al obtener los guías disponibles:', error));\n    }\n  }, [show, groupData]);\n\n  // Función para enviar la actualización\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!selectedGuide) return;\n    // Enviar la actualización al backend\n    fetch(`${process.env.REACT_APP_API_URL}/grupo/${groupData.id_group}/update_guide`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        guide_id: parseInt(selectedGuide, 10)\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.status === 'success') {\n        // Notificar al componente padre con el nuevo guía\n        onGuideUpdated(data.updated_guide);\n        onHide();\n      } else {\n        console.error('Error al actualizar el guía:', data.message);\n        alert('Error al actualizar el guía.');\n      }\n    }).catch(error => {\n      console.error('Error al actualizar el guía:', error);\n      alert('Error al actualizar el guía.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onHide,\n    centered: true,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Editar Gu\\xEDa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"guideSelect\",\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Seleccione el nuevo gu\\xEDa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n            value: selectedGuide,\n            onChange: e => setSelectedGuide(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Seleccione...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), availableGuides.map(guide => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: guide.id,\n              children: guide.name\n            }, guide.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: onHide,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Guardar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(EditGuideModal, \"k/p0Tt4/607NyqqPyfnTU1xwgJ8=\");\n_c = EditGuideModal;\nexport default EditGuideModal;\nvar _c;\n$RefreshReg$(_c, \"EditGuideModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","Button","Form","jsxDEV","_jsxDEV","EditGuideModal","show","onHide","groupData","onGuideUpdated","_s","selectedGuide","setSelectedGuide","availableGuides","setAvailableGuides","startingDate","start_date","endingDate","end_date","fetch","process","env","REACT_APP_API_URL","id_group","then","response","json","data","available_guides","current_guide","id","catch","error","console","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","guide_id","parseInt","status","updated_guide","message","alert","centered","children","onSubmit","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Group","controlId","className","Label","Select","value","onChange","target","required","map","guide","name","Footer","variant","onClick","type","_c","$RefreshReg$"],"sources":["C:/Users/Bautista/Documents/Proyectos/bayTours/bayTours/frontend_2.0/baytours-react/src/components/EditGuideModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\n\r\nconst EditGuideModal = ({ show, onHide, groupData, onGuideUpdated }) => {\r\n  // Estado para almacenar el guía seleccionado\r\n  const [selectedGuide, setSelectedGuide] = useState('');\r\n\r\n  // Estado para la lista de guías disponibles (se cargarán cuando se abra el modal)\r\n  const [availableGuides, setAvailableGuides] = useState([]);\r\n\r\n  // Cuando el modal se abre, carga la lista de guías (usando fetch)\r\n  useEffect(() => {\r\n    if (show) {\r\n      // Aquí llamamos al endpoint del backend para obtener los guías disponibles.\r\n      // Se pueden pasar parámetros como startingDate y endingDate que se extraigan de groupData.\r\n      const startingDate = groupData.start_date; // Ajusta según corresponda\r\n      const endingDate = groupData.end_date;\r\n      fetch(`${process.env.REACT_APP_API_URL}/guides/${groupData.id_group}/available_guides?starting_date=${startingDate}&ending_date=${endingDate}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if (data.available_guides) {\r\n            setAvailableGuides(data.available_guides);\r\n            // Si groupData tiene guía actual, la seleccionamos por defecto\r\n            if (data.current_guide) {\r\n              setSelectedGuide(data.current_guide.id);\r\n            }\r\n          } else {\r\n            setAvailableGuides([]);\r\n          }\r\n        })\r\n        .catch(error => console.error('Error al obtener los guías disponibles:', error));\r\n    }\r\n  }, [show, groupData]);\r\n\r\n  // Función para enviar la actualización\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!selectedGuide) return;\r\n    // Enviar la actualización al backend\r\n    fetch(`${process.env.REACT_APP_API_URL}/grupo/${groupData.id_group}/update_guide`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ guide_id: parseInt(selectedGuide, 10) })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.status === 'success') {\r\n          // Notificar al componente padre con el nuevo guía\r\n          onGuideUpdated(data.updated_guide);\r\n          onHide();\r\n        } else {\r\n          console.error('Error al actualizar el guía:', data.message);\r\n          alert('Error al actualizar el guía.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error al actualizar el guía:', error);\r\n        alert('Error al actualizar el guía.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} onHide={onHide} centered>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Editar Guía</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"guideSelect\" className=\"mb-3\">\r\n            <Form.Label>Seleccione el nuevo guía</Form.Label>\r\n            <Form.Select\r\n              value={selectedGuide}\r\n              onChange={(e) => setSelectedGuide(e.target.value)}\r\n              required\r\n            >\r\n              <option value=\"\">Seleccione...</option>\r\n              {availableGuides.map((guide) => (\r\n                <option key={guide.id} value={guide.id}>\r\n                  {guide.name}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Cancelar\r\n          </Button>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Guardar\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditGuideModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}